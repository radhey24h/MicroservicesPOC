name: Docker FileManagement CI

on:
  push:
    branches: [ "main" ]
    paths:
      - 'backend/services/file-management/**'
  pull_request:
    branches:
      - 'main'
    paths:
      - 'backend/services/file-management/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    # Set up Docker Buildx for better platform support
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Read and update the version for the specific pipeline
    - name: Update version in version.txt for 'filemanagement'
      run: |
        PIPELINE_NAME="filemanagement"
        VERSION_FILE="backend/services/file-management/version.txt"
        
        # Retrieve the current version from the version file, if it exists
        if [ -f $VERSION_FILE ]; then
          VERSION=$(cat $VERSION_FILE)
        else
          VERSION="0.0.0"  # Initialize to 0.0.0 if no version exists
        fi
        
        # Increment the version (patch increment here)
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        PATCH=$((PATCH + 1))
        NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
        
        # Write the new version back to the file
        echo "Version for $PIPELINE_NAME: $NEW_VERSION"
        echo "$NEW_VERSION" > $VERSION_FILE
        
        # Set the image tag based on the new version
        IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/filemanagementapi:${NEW_VERSION}"
        
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      
    # Build the Docker image
    - name: Build the Docker image
      run: docker build ./backend/services/file-management --file backend/services/file-management/Dockerfile --tag ${{ env.IMAGE_TAG }}
      
    # Push the Docker image to Docker Hub with retries
    - name: Push the Docker image with retries
      run: |
        for i in {1..3}; do
          docker push ${{ env.IMAGE_TAG }} && break || sleep 15
        done

    # Commit and push the updated version file back to the repository
    - name: Commit version increment
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add version.txt
        git commit -m "Increment version to ${{ env.NEW_VERSION }} for $PIPELINE_NAME"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}  # Use a PAT if the default token doesn't work
